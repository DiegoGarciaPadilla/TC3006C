version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: sentiments
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d sentiments"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sentiment-network

  # Cache Redis
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sentiment-network

  # API Instancia 1
  api1:
    build: ./api
    environment:
      WORKER_ID: worker-1
      REDIS_HOST: redis
      DB_HOST: postgres
      DB_NAME: sentiments
      DB_USER: admin
      DB_PASSWORD: secret
      PYTHONUNBUFFERED: 1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sentiment-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # API Instancia 2
  api2:
    build: ./api
    environment:
      WORKER_ID: worker-2
      REDIS_HOST: redis
      DB_HOST: postgres
      DB_NAME: sentiments
      DB_USER: admin
      DB_PASSWORD: secret
      PYTHONUNBUFFERED: 1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sentiment-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # API Instancia 3
  api3:
    build: ./api
    environment:
      WORKER_ID: worker-3
      REDIS_HOST: redis
      DB_HOST: postgres
      DB_NAME: sentiments
      DB_USER: admin
      DB_PASSWORD: secret
      PYTHONUNBUFFERED: 1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sentiment-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Load Balancer Nginx
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - api1
      - api2
      - api3
    networks:
      - sentiment-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Dashboard de Monitoreo Simple
  monitor:
    build: ./monitoring
    ports:
      - "8080:8080"
    environment:
      API_URL: http://nginx
    depends_on:
      - nginx
    networks:
      - sentiment-network

networks:
  sentiment-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: